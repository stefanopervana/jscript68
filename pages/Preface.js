import Layout from '../components/layout'

export default () => (
  <Layout title='Preface'>
    <div>
     <style jsx>{`.col-md-6 {border-radius: 4px; overflow: hidden; box-shadow: 0 9px 9px rgba(0, 0, 0, 0.9); display: block; min-height: 70%; font-family: Verdana; max-width: 1100px; background-color: #CEDDF1; margin: auto; margin-top: auto; margin-right: auto; margin-bottom: auto; margin-left: auto; white-space: pre-wrap; border: none; box-sizing: border-box; color: #2D0D0D; line-height: 1.1; padding: 4.7em} .home {margin: 1.5em 0;} h1 {color: #867452; font-size: 60px;} h2 {color: #867452; font-size: 40px} h3 {color: #867452; font-size: 30px} .it, .listit {color: brown; font-size: 24px; font-style: italic; letter-spacing: 0.04em; } .p, .listitem {color: #75AFAD; font-size: 24px; font-style: italic; letter-spacing: 0.04em;} pre {display: block; font-family: monospace; white-space: pre; margin: 1em 0; font-size: 16px} code{margin: auto; font-family:"Lucida Console"; "Andale Mono"; "Courier New"; Courier; monospace; font-style:normal; color:#395C73;} code strong {color:#000; background:#F5FD11; padding:1px; font-weight:normal;} .interno {font-family: verdana; font-style: italic; color: #395C73; font-size: 24px;} .sub{text-decoration: underline;} .im {color: #04445c;} .re {color: #650669;} .sub{text-decoration: underline; } blockquote {color: #111AD5; font-size: 24px; font-style: italic; letter-spacing: 0.04em;} .note { padding:3px; background: orange; margin-top: 1em; margin-bottom: 1em; margin-left: 40px; margin-right: 40px;}`}</style>

    <div className="col-md-6"> 
    <h1>Foreword</h1>
<p className="it">Como es bien sabido en este punto, he creado JavaScript en diez días en mayo de 1995, bajo coacción y conflictivos imperativos de gestión- "hacer que parezca Java", "hacerlo fácil para principiantes", "hacer que el control de casi todo en el Netscape navegador."</p>
<p className="p">As is well known at this point, I created JavaScript in ten days in May 1995, under duress and conflicting management imperatives—“make it look like Java,” “make it easy for beginners,” “make it control almost everything in the Netscape browser.”</p>
<p className="it">Aparte de conseguir dos cosas grandes a la derecha (funciones de primera clase, prototipos de objetos), mi solución a los desafiantes requisitos y el calendario loco fue hacer JavaScript extremadamente maleable desde el principio. Yo sabía que los desarrolladores tendrían que "parchar" las primeras versiones para arreglar los errores, y pioneros en mejores enfoques de lo que había combinado en la forma de bibliotecas integradas. Cuando muchos lenguajes restringen la mutabilidad para que, por ejemplo, los objetos incorporados no puedan ser revisados ​​o extendidos en tiempo de ejecución, o los enlaces de nombres de biblioteca estándar no pueden ser anulados por asignación, JavaScript permite la alteración casi completa de cada objeto.</p>
<p className="p">Apart from getting two big things right (first-class functions, object prototypes), my solution to the challenging requirements and crazy- short schedule was to make JavaScript extremely malleable from   the start. I knew developers would have to “patch” the first few ver- sions to fix bugs, and pioneer better approaches than what I had cob- bled together in the way of built-in libraries. Where many languages restrict mutability so that, for example, built-in objects cannot be revised or extended at runtime, or standard library name bindings cannot be overridden by assignment, JavaScript allows almost com- plete alteration of every object.</p>
<p className="it">Creo que esta fue una buena decisión de diseño en equilibrio. Presenta claramente desafíos en ciertos dominios (por ejemplo, mezcla segura de código confiable y no confiable dentro de los límites de seguridad del navegador). Sin embargo, era fundamental apoyar el llamado parche de mono, mediante el cual los desarrolladores editaban objetos estándar, tanto para evitar errores como para retroac- cionar emulaciones de funcionalidad futura en viejos navegadores (el denominado shim de biblioteca polyfill, que en América Inglés sería llamado "spackle").</p>
<p className="p">I believe that this was a good design decision on balance. It clearly presents challenges in certain domains (e.g., safely mixing trusted and untrusted code within the browser’s security boundaries). But it was critical to support so-called monkey-patching, whereby developers edited standard objects, both to work around bugs and to retro- fit emulations of future functionality into old browsers (the so-called polyfill library shim, which in American English would be called “spackle”).</p>
<p className="it">Más allá de estos usos a veces mundanos, la maleabilidad de JavaScript alentó a las redes de innovación de usuarios a formar y crecer a lo largo de varias rutas más creativas. Los usuarios principales crearon un conjunto de herramientas o librerías de framework modeladas en otros idiomas: Prototype en Ruby, MochiKit en Python, Dojo en Java, TIBET en Smalltalk. Y luego la biblioteca jQuery ("New Wave JavaScript"), que me pareció ser un pariente tardío cuando lo vi por primera vez en 2007, tomó el mundo de JavaScript por la tormenta, evitando precedentes en otros idiomas mientras que el aprendizaje de las bibliotecas de JavaScript más antiguo , en lugar de abrir el modelo de "consulta y hacer" del navegador y simplificarlo radicalmente.</p>
<p className="p">Beyond these sometimes mundane uses, JavaScript’s malleability encouraged user innovation networks to form and grow along sev- eral more creative paths. Lead users created toolkit or framework libraries patterned on other languages: Prototype on Ruby, MochiKit on Python, Dojo on Java, TIBET on Smalltalk. And then the jQuery library (“New Wave JavaScript”), which seemed to me to be a relative late-comer when I first saw it in 2007, took the JavaScript world by storm by eschewing precedent in other languages while learning from older JavaScript libraries, instead hewing to the “query and do” model of the browser and simplifying it radically.</p>
<p className="it">Los usuarios principales y sus redes de innovación desarrollaron así un "estilo hogareño" de Java Script, que todavía está siendo emulado y simplificado en otras bibliotecas, y también se pliega en los esfuerzos modernos de estandarización de la web.</p>
<p className="p">Lead users and their innovation networks thus developed a Java- Script “home style,” which is still being emulated and simplified in other libraries, and also folded into the modern web standardization efforts.</p>
<p className="it">En el transcurso de esta evolución, JavaScript ha permanecido compatible con el backward ("bugward") y, por supuesto, mutable por defecto, incluso con la adición de ciertos métodos en la última versión del estándar ECMAScript para congelar objetos contra propiedades de objeto de extensión y sellado contra ser Sobrescrita Y el viaje evolutivo de JavaScript está lejos de terminar. Al igual que con las lenguas vivas y los sistemas biológicos, el cambio es una constante a largo plazo. Todavía no puedo prever una sola "biblioteca estándar" o un estilo de codificación que barrería a todos los demás antes.</p>
<p className="p">In the course of this evolution, JavaScript has remained backward (“bugward”) compatible and of course mutable by default, even with the addition of certain methods in the latest version of the ECMAScript standard for freezing objects against extension and sealing object properties against being overwritten. And JavaScript’s evolutionary journey is far from over. Just as with living languages and biological systems, change is a constant over the long term. I still cannot foresee a single “standard library” or coding style sweeping all others before it.</p>
<p className="it">Ningún idioma es libre de peculiaridades o es tan restrictivo como para dictar las mejores prácticas universales, y JavaScript está lejos de quirk-free o restricción (más bien lo contrario!). Por lo tanto, para ser eficaces, más de lo que es el caso con la mayoría de los otros lenguajes de programación, los desarrolladores de JavaScript deben estudiar y perseguir un buen estilo, uso adecuado y mejores prácticas. Al considerar lo que es más eficaz, creo que es crucial evitar la reacción exagerada y la construcción de guías de estilo rígido o dogmático.</p>
<p className="p">No language is free of quirks or is so restrictive as to dictate universal best practices, and JavaScript is far from quirk-free or restrictionist (more nearly the opposite!). Therefore to be effective, more so than is the case with most other programming languages, JavaScript devel- opers must study and pursue good style, proper usage, and best prac- tices. When considering what is most effective, I believe it’s crucial to avoid overreacting and building rigid or dogmatic style guides.</p>
<p className="it">Este libro adopta un enfoque equilibrado basado en pruebas y experiencias concretas, sin desviarse hacia la rigidez o la prescripción excesiva. Creo que será una ayuda crítica y una guía fiable para muchas personas que buscan escribir JavaScript eficaz sin sacrificar la expresividad y la libertad de buscar nuevas ideas y paradigmas. También es una lectura enfocada y divertida con excelentes ejemplos.</p>
<p className="p">This book takes a balanced approach based on concrete evidence  and experience, without swerving into rigidity or excessive prescrip- tion. I think it will be a critical aid and trusty guide for many people who seek to write effective JavaScript without sacrificing expressive- ness and the freedom to pursue new ideas and paradigms. It’s also a focused, fun read with terrific examples.</p>
<p className="it">Por último, he tenido el privilegio de conocer a David Herman desde 2006, cuando entré en contacto por primera vez en nombre de Mozilla para involucrarlo en el organismo de estándares de Ecma como experto invitado. La experiencia profunda y sin pretensiones de Dave y su entusiasmo por JavaScript brillan a través de cada página. ¡Bravo!</p>
<p className="p">Finally, I have been privileged to know David Herman since 2006, when I first made contact on behalf of Mozilla to engage him on the Ecma standards body as an invited expert. Dave’s deep yet unpre- tentious expertise and his enthusiasm for JavaScript shine through every page. Bravo!</p>
<p className="p"><strong>—Brendan Eich</strong></p>
<h1>Preface</h1>
<p className="it">Aprender un lenguaje de programación requiere familiarizarse con su sintaxis, el conjunto de formas y estructuras que conforman los programas legales y la semántica, el significado o el comportamiento de esas formas. Pero más allá de eso, dominar una lengua requiere entender sus pragmaticas, las maneras en que los rasgos de la lengua se utilizan para construir programas eficaces. Esta última categoría puede ser especialmente sutil, sobre todo en un lenguaje tan flexible y expresivo como JavaScript.</p>
<p className="p">Learning a programming language requires getting acquainted with its syntax, the set of forms and structures that make up legal pro- grams, and semantics, the meaning or behavior of those forms. But beyond that, mastering a language requires understanding its prag- matics, the ways in which the language’s features are used to build effective programs. This latter category can be especially subtle, par- ticularly in a language as flexible and expressive as JavaScript.</p>
<p className="it">Este libro se ocupa de la pragmática de JavaScript. No es un libro introductorio; Supongo que usted tiene cierta familiaridad con JavaScript en particular y la programación en general. Hay muchos excelentes libros introductorios sobre JavaScript, como Java-Script de Douglas Crockford: The Good Parts y el JavaScript Eloquente de Marijn Haverbeke. Mi objetivo con este libro es ayudarte a profundizar tu comprensión de cómo usar JavaScript de manera efectiva para crear aplicaciones y bibliotecas JavaScript más predecibles, fiables y que se puedan mantener.</p>
<p className="p">This book is concerned with the pragmatics of JavaScript. It is not an in- troductory book; I assume you have some familiarity with JavaScript in particular and programming in general. There are many excellent introductory books on JavaScript, such as Douglas Crockford’s Java- Script: The Good Parts and Marijn Haverbeke’s Eloquent JavaScript. My goal with this book is to help you deepen your understanding of how to use JavaScript effectively to build more predictable, reliable, and maintainable JavaScript applications and libraries.</p>
<h2>JavaScript versus ECMAScript</h2>
<p className="it">Es útil aclarar alguna terminología antes de bucear en el material de este libro. Este libro trata sobre un lenguaje casi universalmente conocido como JavaScript. Sin embargo, el estándar oficial que define la especificación describe un lenguaje que se llama ECMAScript. La historia es enrevesada, pero se reduce a una cuestión de derecho de autor: Por razones legales, la organización de estándares, Ecma International, no pudo usar el nombre "JavaScript" para su estándar. (Añadiendo insulto a la lesión, la organización de estándares cambió su nombre de la ECMA -una abreviatura para European Computer Manufacturers Association- a Ecma International, sin capitalización. Al momento del cambio, el nombre capitalizado ECMAScript fue puesto en piedra.)</p>
<p className="p">It’s helpful to clarify some terminology before diving into the material of this book. This book is about a language almost universally known as JavaScript. Yet the official standard that defines the specification describes a language it calls ECMAScript. The history is convoluted, but it boils down to a matter of copyright: For legal reasons, the stan- dards organization, Ecma International, was unable to use the name “JavaScript” for its standard. (Adding insult to injury, the standards organization changed its name from the original ECMA—an abbrevi- ation for European Computer Manufacturers Association—to Ecma International, without capitalization. By the time of the change, the capitalized name ECMAScript was set in stone.)</p>
<p className="it">Formalmente, cuando la gente se refiere a ECMAScript se refieren generalmente al lenguaje "ideal" especificado por el estándar de Ecma. Mientras tanto, el nombre JavaScript podría significar cualquier cosa, desde el lenguaje tal como existe en la práctica real, hasta el motor JavaScript específico de un proveedor. En el uso común, la gente utiliza a menudo los dos términos intercambiablemente. En aras de la claridad y la coherencia, en este libro sólo usaré ECMAScript para hablar sobre el estándar oficial; De lo contrario, me referiré al lenguaje como JavaScript. También utilizo la abreviatura común ES5 para referirme a la quinta edición del estándar ECMAScript.</p>
<p className="p">Formally, when people refer to ECMAScript they are usually referring to the “ideal” language specified by the Ecma standard. Meanwhile, the name JavaScript could mean anything from the language as it exists in actual practice, to one vendor’s specific JavaScript engine.  In common usage, people often use the two terms interchangeably. For the sake of clarity and consistency, in this book I will only use ECMAScript to talk about the official standard; otherwise, I will refer to the language as JavaScript. I also use the common abbreviation ES5 to refer to the fifth edition of the ECMAScript standard.</p>
<h2>On the Web</h2>
<p className="it">Es difícil hablar de JavaScript sin hablar de la web. Hasta la fecha, JavaScript es el único lenguaje de programación con soporte incorporado en todos los principales navegadores web para las secuencias de comandos de aplicaciones del lado del cliente. Además, en los últimos años, JavaScript se ha convertido en un lenguaje popular para la implementación de aplicaciones de servidor con el advenimiento de la plataforma Node.js.</p>
<p className="p">It’s hard to talk about JavaScript without talking about the web. To date, JavaScript is the only programming language with built-in support in all major web browsers for client-side application scripting. Moreover, in recent years, JavaScript has become a popular language for implement- ing server-side applications with the advent of the Node.js platform.</p>
<p className="it">Sin embargo, este es un libro sobre JavaScript, no sobre la programación web. A veces, es útil hablar de ejemplos relacionados con la web y aplicaciones de conceptos. Pero el enfoque de este libro está en el lenguaje -su sintaxis, semántica y pragmática- en lugar de en las API y tecnologías de la plataforma web.</p>
<p className="p">Nevertheless, this is a book about JavaScript, not about web pro- gramming. At times, it’s helpful to talk about web-related examples and applications of concepts. But the focus of this book is on the lan- guage—its syntax, semantics, and pragmatics—rather than on the APIs and technologies of the web platform.</p>
<h2>A Note on Concurrency</h2>
<p className="it">Un aspecto curioso de JavaScript es que su comportamiento en configuraciones concurrentes es completamente no especificado. Hasta e incluyendo la quinta edición, el estándar ECMAScript no dice nada sobre el comportamiento de los programas de Java Script en un entorno interactivo o concurrente. El capítulo 7 trata de la concurrencia y, por lo tanto, describe técnicamente las características no oficiales de JavaScript. Pero en la práctica, todos los principales motores de JavaScript comparten un modelo común de concurrencia. Y trabajar con programas concurrentes e interactivos es un concepto central unificador de la programación de JavaScript, a pesar de su ausencia de la norma. De hecho, futuras ediciones de la norma ECMAScript oficialmente formalizarán estos aspectos compartidos del modelo de concurrencia de JavaScript.</p>
<p className="p">A curious aspect of JavaScript is that its behavior in concurrent set- tings is completely unspecified. Up to and including the fifth edition, the ECMAScript standard says nothing about the behavior of Java- Script programs in an interactive or concurrent environment. Chap- ter 7 deals with concurrency and so technically describes unofficial features of JavaScript. But in practice, all major JavaScript engines share a common model of concurrency. And working with concurrent and interactive programs is a central unifying concept of JavaScript programming, despite its absence from the standard. In fact, future editions of the ECMAScript standard may officially formalize these shared aspects of the JavaScript concurrency model.</p>
<h1>Acknowledgments</h1>
<p className="it">Este libro debe mucho al inventor de JavaScript, Brendan Eich. Estoy profundamente agradecido a Brendan por invitarme a participar en la estandarización de JavaScript y por su tutoría y apoyo en mi carrera en Mozilla.</p>
<p className="p">This book owes a great deal to JavaScript’s inventor, Brendan Eich. I’m deeply grateful to Brendan for inviting me to participate in the standardization of JavaScript and for his mentorship and support in my career at Mozilla.</p>
<p className="it">Gran parte del material de este libro está inspirado e informado por excelentes artículos de blog y artículos en línea. He aprendido mucho de los posteos de Ben "vaquero" Alman, Erik Arvidsson, Mathias Bynens, Tim "creationix" Caswell, Michaeljohn "inimino" Clement, Angus Croll, Andrew Dupont, Ariya Hidayat, Steven Levithan, Pan Thomakos, Y Juriy "kangax" Zaytsev. Por supuesto, el último recurso para este libro es la especificación ECMAScript, que ha sido editada y actualizada sin descanso desde la edición 5 por Allen Wirfs-Brock. Y Mozilla Developer Network continúa siendo uno de los recursos en línea más impresionantes y de alta calidad para las API y características de JavaScript.</p>
<p className="p">Much of the material in this book is inspired and informed by excellent blog posts and online articles. I have learned a lot from posts by Ben “cowboy” Alman, Erik Arvidsson, Mathias Bynens, Tim “creationix” Caswell, Michaeljohn “inimino” Clement, Angus Croll, Andrew Dupont, Ariya Hidayat, Steven Levithan, Pan Thomakos, Jeff Walden, and Juriy “kangax” Zaytsev. Of course, the ultimate resource for this book is the ECMAScript specification, which has been  tirelessly  edited and updated since Edition 5 by Allen Wirfs-Brock. And the Mozilla Developer Network continues to be one of the most impressive and high-quality online resources for JavaScript APIs and features.</p>
<p className="it">He tenido muchos asesores durante el curso de la planificación y la escritura de este libro. John Resig me dio consejos útiles sobre la autoría antes de comenzar. Blake Kaplan y Patrick Walton me ayudaron a recoger mis pensamientos y planear la organización del libro en las primeras etapas. Durante el curso de la redacción, he obtenido buenos consejos de Brian Anderson, Norbert Lindenberg, Sam Tobin-Hochstadt, Rick Waldron y Patrick Walton.</p>
<p className="p">I’ve had many advisors during the course of planning and writing this book. John Resig gave me useful advice on authorship before I began. Blake Kaplan and Patrick Walton helped me collect my thoughts and plan out the organization of the book in the early stages. During the course of the writing, I’ve gotten great advice from Brian Anderson, Norbert Lindenberg, Sam Tobin-Hochstadt, Rick Waldron, and Pat- rick Walton.</p>
<p className="it">El personal de Pearson ha sido un placer trabajar con. Olivia Basegio, Audrey Doyle, Trina MacDonald, Scott Meyers y Chris Zahn han estado atentos a mis preguntas, pacientes con mis retrasos y acomodando mis peticiones. No podía imaginar una primera experiencia más agradable con la autoría. Y estoy absolutamente honrado de contribuir a esta maravillosa serie. He sido un fan de C ++ efectivo desde mucho antes de que sospechara que podría tener el privilegio de escribir un libro Efectivo.</p>
<p className="p">The staff at Pearson has been a pleasure to work with. Olivia Basegio, Audrey Doyle, Trina MacDonald, Scott Meyers, and Chris Zahn have been attentive to my questions, patient with my delays, and accom- modating of my requests. I couldn’t imagine a more pleasant first experience with authorship. And I am absolutely honored to contrib- ute to this wonderful series. I’ve been a fan of Effective C++ since long before I ever suspected I might have the privilege of writing an Effec- tive book myself.</p>
<p className="it">No podía creer mi buena fortuna al encontrar un equipo tan soñado de editores técnicos. Me siento honrado de que Erik Arvidsson, Rebecca Mur- phey, Rick Waldron y Richard Worth estuvieran de acuerdo en editar este libro, y me han proporcionado críticas y sugerencias invaluables. En más de una ocasión me salvaron de algunos errores verdaderamente embarazosos.</p>
<p className="p">I couldn’t believe my good fortune at finding such a dream team of technical editors. I’m honored that Erik Arvidsson, Rebecca Mur- phey, Rick Waldron, and Richard Worth agreed to edit this book, and they’ve provided me with invaluable critiques and suggestions. On more than one occasion they saved me from some truly embarrassing errors.</p>
<p className="it">Escribir un libro era más intimidante de lo que esperaba. Yo podría haber perdido mi coraje si no fuera por el apoyo de amigos y colegas. No sé si lo sabían en ese momento, pero Andy Dinamarca, Rick Waldron y Travis Winfrey me dieron el estímulo que necesitaba en momentos de duda.</p>
<p className="p">Writing a book was more intimidating than I expected. I might have lost my nerve if it weren’t for  the support of friends and colleagues.   I don’t know if they knew it at the time, but Andy Denmark, Rick Waldron, and Travis Winfrey gave me the encouragement I needed in moments of doubt.</p>
<p className="it">La gran mayoría de este libro fue escrito en el fabuloso Java Beach Café en el hermoso barrio Parkside de San Francisco. Los miembros del personal saben todo mi nombre y sé lo que voy a ordenar antes de ordenarlo. Estoy agradecido a ellos por proporcionar un lugar acogedor para trabajar y mantenerme alimentado y con cafeína.</p>
<p className="p">The vast majority of this book was written at the fabulous Java Beach Café in San Francisco’s beautiful Parkside neighborhood. The staff members all know my name and know what I’m going to order before I order it. I am grateful to them for providing a cozy place to work and keeping me fed and caffeinated.</p>
<p className="it">Mi pequeño amigo felino Schloopy hizo todo lo posible para contribuir a este libro. Al menos, siguió saltando sobre mi regazo y sentado frente a la pantalla. (Esto podría tener algo que ver con la calidez de la computadora portátil.) Schmoopy ha sido mi amigo fiel desde 2006, y no puedo imaginar mi vida sin el pequeño furball.</p>
<p className="p">My fuzzy little feline friend Schmoopy tried his best to contribute to this book. At least, he kept hopping onto my lap and sitting in front of the screen. (This might have something to do with the warmth of the laptop.) Schmoopy has been my loyal buddy since 2006, and I can’t imagine my life without the little furball.</p>
<p className="it">Toda mi familia ha apoyado y entusiasmado con este proyecto de principio a fin. Por desgracia, mis abuelos Frank y Miriam Slamar fallecieron antes de poder compartir el producto final con ellos. Pero estaban emocionados y orgullosos de mí, y hay un pedacito de mi experiencia de niñez escribiendo programas BASIC con Frank en este libro.</p>
<p className="p">My entire family has been supportive and excited about this project from beginning to end. Sadly, my grandparents Frank and Miriam Slamar both passed away before I could share the final product with them. But they were excited and proud for me, and there’s a little piece of my boyhood experiences writing BASIC programs with Frank in this book.</p>
<p className="it">Finalmente, debo el amor de mi vida, Lisa Silveria, más de lo que podría ser pagado en una introducción.</p>
<p className="p">Finally, I owe the love of my life, Lisa Silveria, more than could ever be repaid in an introduction.</p>
<h1>About the Autor</h1>
<p className="it"><strong>David Herman</strong> es investigador senior de Mozilla Research. Tiene una licenciatura en ciencias de la computación de Grinnell College y una maestría y doctorado en ciencias de la computación de la Universidad de Northeastern. David sirve en Ecma TC39, el comité responsable de la estandarización de JavaScript.</p>
<p className="p"><strong>David Herman</strong> is a senior researcher at Mozilla Research. He holds  a BA in computer science from Grinnell College and an MS and PhD in computer science from Northeastern University. David serves on Ecma TC39, the committee responsible for the standardization of JavaScript.</p>
</div>
</div>
  </Layout>
)
